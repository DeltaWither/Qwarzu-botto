Started by a command like ?remindme (time) (other args)
Time is 1 to 3 arguments specifying when the command will be executed

Every form is in order in which it should be checked, starting up going downwards. This is important where one form of a structure is the same as another but with less things at the end. The longer one must be checked first or else the shorter one will catch both cases. Same with the time arguments.

Grammar:

(INT):
    A non-negative integer (0, 1, 2...)


(TIME-UNIT):
    A time unit

    Forms:
    ms = millisecond
    s = second
    m = minute
    h = hour
    d = day
    w = week
    mo = month
    y = year
    both the abbreviations and the full names are TIME-UNITs

    
(SINGLE-TIME-AMOUNT)
    An amount of time of one type
    
    Forms:
        (INT)(TIME-UNIT)
        Examples:
            1h (1 hour)
            3y (3 years)
            1month (1 month)
            0w (no time)
            

(TIME-AMOUNT):
    An amount of time
    
    Forms:
        (SINGLE-TIME-AMOUNT)(SINGLE-TIME-AMOUNT)... (one or more)
        Examples:
            1d (1 day)
            4minute1s (4 minutes 1 second)
            2m8y (8 years 2 minutes)
            1d1d (2 days)
            1d1h1m1s1ms (1 day 1 hour 1 minute 1 second 1 millisecond)

            
(TIME-LITERAL):
    A point in time without any operations
    
    Forms:
        n = now (current time)
        (more to be added eventually)

            
(TIME):
    A point in time
    
    Forms:
        (TIME-LITERAL)+(TIME-AMOUNT)
        Note: (TIME-LITERAL)+(TIME-AMOUNT)+(TIME-AMOUNT)+ ... is useless (for now) and doesn't need to be implemented
        Examples: 
            now+1d (A day from now)
            
        (TIME-LITERAL)
        
        (TIME-AMOUNT)
        Equivalent to now+(TIME-AMOUNT)
        Examples:
            1d (now+1d)


(AMOUNT):
    An amount of times to repeat the schedule
    
    Forms:
        x(INT)
        Examples:
            x1 (once)
            x7 (7 times)
        

(INTERVAL):
    A time amount that is specifically used as an interval
    
    Forms:
        (TIME-AMOUNT)-
        Examples:
            3h- (Every 3 hours)
            1h5s (Every 1 hour 5 seconds)

=====================================================================================================

Possible time arguments:

3 arguments:
    (TIME) (INTERVAL) (AMOUNT)
    It will be executed first at the time of the first argument, then every time amount of the interval, up to the third argument amount of times
    
2 arguments:
    (TIME) (INTERVAL)
    Same as 3 arguments, but an infinite amount of times
    
    (INTERVAL) (AMOUNT)
    Same as 3 arguments, but the starting time is now + the interval
    
1 argument:
    (INTERVAL)
    Executed starting at now + the interval, an infinite amount of times
    
    (TIME)
    It will be executed once at the specified time


=====================================================================================================

The grammar above allows for time arguments as simple as "1d", executing in one day, but can go up to specifying a starting point and an interval or an explicit list of times to be executed. This is powerful enough for most uses while being simple, but maybe in the future there could be other more powerful options like cron syntax.

After the time argument is parsed, how it's handled with a priority queue:
    Once a schedule has been started, an object with a timestamp, an id, a parameter for executions left (undefined or null if infinite), the function to be executed and a next() function will be added to a priority queue. The queue will be popped when the time reaches the head's timestamp. Then the next() function will give the next timestamp when the function should be executed again, and a new object with the new timestamp, the same id, same executed function, same next() function and executions left -1 (if defined).
    
    The id will also be the key in an object containing all these objects so they can be found by id.
    
    There is a command for starting any schedule with any time parameters. However, that should be only for admin or dev use, and usually schedules will be called by other commands that give limits to the time commands to avoid spamming messages with 1ms interval.
    
    Another command is able to stop schedules only if the caller is an admin or whoever started the schedule.
    
    Another command lists the next schedules to be executed, including the same schedules after being executed and renewed.
    
    The priority queue is a balanced binary search tree. The next schedule to be executed is always the leftmost node, deleting anything is easy and there is total order too.

































