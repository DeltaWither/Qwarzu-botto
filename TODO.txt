29/03/2022

Set of features to be implemented:

- Simple way for commands to have state. Right now all commands have no side effects. For now updating some JSON file with all the state could be enough, but eventually there could be some database stuff.

- Clean way for commands to have checks for roles of the caller. It should be a check external to the actual command's file. Having an if statement for every command that needs perms is disgusting.

- Helper methods to help parse some arguments. isId, isUserId, isRoleId?, isChannelId?, isMention, isRoleMention?, isChannelMention?. Maybe, and this is a big maybe, isEmojiId and isEmoji.

- Make commands asynchronous. I'm pretty sure they aren't yet
--DONE-- (they already were)

- Make commands a class. This will also allow for (for now) two other classes. Listeners and schedules. Listeners will be executed on a certain event, similar to how dyno mutes someone who says a banned word or replies to toyota corolla. I guess those will be related to the client.on() from discord.js. Schedules will be executed at certain times.

- Separate commands in the commands folder into different subfolders. One of them will be the folder with all the essential commands to manage the bot like ?commands, ?help (to be implemented), ?ping, ?enable/disable (if I can actually manage to make listeners and schedules) and maybe some more.

Wow that's a lot of stuff. I won't be able to do anything for a couple days tho but now I know what to do.

--------------------------------------------------------------------------
--------------------------------------------------------------------------
2?/03/2022

It would be cool to improve this bot so here's stuff I need to do

- Convert to typescript for security and possibly use webpack or whatever magical tools to be able to use all modern features of js and have a minimized build.
- Make the readme useful for an introduction.
- Documentation.
- Improve the folder structure and organization of the bot.

Also some features I have in mind
- Start implementing arguments for some commands
- Implement the "help" argument for every command. It will send a message detailing all the arguments and how the command works.
- Make a folder containing useful functions like checking if a string is an id or a ping, checking roles and permissions in a convenient way...
- Talking about permissions, maybe a json file somewhere could have the permissions of each command so that it's enabled/disabled for certain roles. Also option for advanced permission checking for some weird commands?
- Organize the commands in categories by putting them in different folders. It will make it easier to set permissions for groups of commands.
- Another option is regardless of folders, creating groups of commands for different perm stuff. For example, ?dm in groups staff and allChannels, one indicating who can use it, the other where. This is kinda like linux groups? Sounds cool but way too much for now.
- Continuous background stuff. For now it's just a command running and it's done in a moment. It would be interesting to have a specific feature that is doing stuff constantly, like checking for certain words in messages, sending messages at certain times, etc. Also consider what happens when a command goes into an infinite loop.
- Special staff loop commands to be able to repeat a command several times. Examples:
	?for i in 1..10 say i						Result: bot sends 10 messages from 1 to 10
	?for member in role(insert role id) dm member asdf		Result: dms every member in that role "asdf"
Of course, this is way overkill for now and there's more important stuff, but it would be damn cool.
